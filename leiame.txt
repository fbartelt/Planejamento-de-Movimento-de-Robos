Para uma descrição mais detalhada, leia o README em https://github.com/fbartelt/Planejamento-de-Movimento-de-Robos

Esse arquivo assume que o comando `catkin_make` já foi executado, assim como os comandos `source catkin_ws/devel/setup` necessários. Ele também assume que o `roscore` está em execução.

Os scripts em python para o A*, e RRT assumem a existência de dois robôs no simulador Stage (arquivo .world), o primeiro, um quadrado verde, é o robô a ser controlado e o segundo, o quadrado laranja, a representação do objetivo. Então se qualquer outro mapa for usado, que não tenha dois robôs nessa ordem específica, o usuário deverá alterar os Publishers e Subscribers rospy em cada um desses scripts.

A*, RRT e Coverage não vão alterar de comportamento simplesmente com uma mudança de mapa, para isso, é necessário alterar parâmetros definidos internamente nos scripts, com referência ao mapa diferente a ser utilizado, assim como seus respectivos grids

Em ordem os scripts necessários para executar o A*, GVD, Coverage e RRT são Astar.py, GVD.py, coverage.py e RRT.py. Para todos esses algoritmos, implementou-se arquivos .launch para facilitar a execução, porém caso por algum motivo não seja possível executar os .launch, é também indicado como executar cada algoritmo manualmente.


### Astar

Por padrão, assume-se que o mapa a ser utilizado é ./catkin_ws/src/tangent_bug/worlds/maze.world. Se qualquer outro mapa for utilizado, será necessário ou alterar o aqruivo .launch ou rodar manualmente.

Rodar com os argumentos e mapa padrão implica que o objetivo, quadrado laranja, está em (5, 2) e que o robô está inicialmente em (-6, 2).

#### Launch File

É possível rodar o algoritmo com o arquivo ./catkin_ws/src/Astar/launch/Astar.launch). Existem parâmetros opcionais `goal` que corresponde às coordenadas do objetivo, em metros, como "x_goal y_goal", pro padrão `goal:="5 2"`.

Para rodar com os argumentos padrões, simplesmente rode em um terminal:

``` 
roslaunch potential_function potential_function.launch
```

Para rodar com parâmetros diferentes:

``` 
roslaunch potential_function potential_function.launch goal:="0 -10"
```

#### Running Manually

Em um terminal, rode:

```
roscd Astar
rosrun stage_ros stageros worlds/maze.world 
```

Em um outro terminal, execute:

```
rosrun Astar Astar.py x y 4
```

onde `x` é a coordenata x do objetivo em metros, e `y` a coordenada y do objetivo em metros.



### GVD

Por padrão o mapa é assumido como ./catkin_ws/src/GVD/worlds/gvd.world). Caso outro mapa seja utilizado, ou se deve alterar o arquivo .launch ou rodar manualmente.

#### Launch File

É possível rodar o algoritmo com o arquivo ./catkin_ws/src/GVD/launch/GVD.launch.

Simplesmente, execute em um terminal:

``` 
roslaunch GVD GVD.launch
```

#### Running Manually

Execute em um terminal:

``` 
roscd GVD
rosrun stage_ros stageros worlds/gvd.world 
```

Em outro terminal, execute:

``` 
rosrun GVD GVD.py
```



### Coverage

Por padrão o mapa é assumido como ./catkin_ws/src/coverage/worlds/trapz2.world. Qualquer outro mapa requer as mesmas alterações que para os outros algoritmos, assim como o arquivo trapz2.pickle, que contém uma lista dos nodos que representam as células da decomposição trapezoidal.

#### Launch File

É possível executar o algoritmo com o arquivo ./catkin_ws/src/coverage/launch/coverage.launch. 

Simplesmente execute em um terminal:

``` 
roslaunch coverage coverage.launch
```

#### Running Manually

Em um terminal, execute:

``` 
roscd coverage
rosrun stage_ros stageros worlds/trapz2.world 
```

Em outro terminal, execute:

``` 
rosrun coverage coverage.py
```

### RRT

O algoritmo RRT depende de um grid, feito a priori, que corresponde à expansão dos obstáculos com dimensões do robô, uma aproximação do espaço de configuraçoes. Dessa forma, caso outro mapa que não seja o padrão seja utilizado, é necessário criar essa nova grid e alterar o script .py do algoritmo. Para gerar essa grid, é possível utilizar o script, adicionado a parte, ./catkin_ws/src/wavefront/scripts/map_expander.py, alterando-o conforme necessário.

Por padrão, assume-se o mapa ./catkin_ws/src/RRT/worlds/maze.world e seu respectivo grid ./catkin_ws/src/RRT/worlds/grid1.npy. 

Por padrão, a posição inicial do robô é (-6, 2) e o objetivo é (5, 2)

#### Launch File

É possível executar o algoritmo por ./catkin_ws/src/RRT/launch/RRT.launch. Existe um parâmetros opcional `goal`, que são as coordenadas do objetivo em metros, como `"x_goal y_goal"`.

Os argumentos padrão são `goal:="5 2"`.

Para executar como os parâmetros padrão:

``` 
roslaunch RRT RRT.launch
```

Executar com parâmetros diferentes:

``` 
roslaunch RRT RRT.launch goal:="-6 -2"
```

#### Running Manually

Em um terminal execute:

``` 
roscd RRT
rosrun stage_ros stageros worlds/maze.world 
```

Em outro terminal execute:

``` 
rosrun RRT RRT.py x y
```

onde `x` é coordenada x do objetivo, `y` a coordenada y.

## References

[^1]: Howie Choset, K. M. Lynch, and S. Hutchinson, Principles of robot motion: theory, algorithms, and implementations. Cambridge, Mass. Bradford, 2005.
‌
